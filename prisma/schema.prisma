generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "linux-musl"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  Admin
  Buyer
}

enum OrderStatus {
  Issued
  Unpaid
  Cancelled
  Expired
}

enum ClassType {
  Economy
  Premium_Economy
  Business
  First_Class
}

enum PassengerType {
  Dewasa
  Anak
  Bayi
}

enum TitleType {
  Mr
  Ms
}

enum RegionType {
  Domestik
  Internasional
}

enum Continent {
  Afrika
  Amerika
  Asia
  Europa
  Australia
}

enum MessageType {
  Promosi
  Notifikasi
}

model Account {
  id                       Int       @id @default(autoincrement())
  createdAt                DateTime  @default(now()) @map("created_at")
  updatedAt                DateTime  @updatedAt @map("updated_at")
  email                    String    @unique
  password                 String
  role                     Role      @default(Buyer)
  otpCode                  String?   @map("otp_code")
  otpExpiration            DateTime? @map("otp_expiration")
  isVerified               Boolean   @default(false) @map("is_verified")
  notificationSubscription String?   @map("notification_subscription")

  user         User?
  Notification Notification[]

  @@map("accounts")
}

model User {
  id          Int      @id @default(autoincrement())
  accountId   Int      @unique @map("account_id")
  fullName    String   @unique @map("full_name")
  phoneNumber String?  @unique @map("phone_number")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  Account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  Order   Order[]

  @@map("users")
}

model City {
  code        String    @id @unique
  name        String
  country     String
  countryCode String    @map("country_code")
  continent   Continent
  imageUrl    String?
  imageId     String?

  Airports Airport[]

  @@map("cities")
}

model Airport {
  iataCode  String     @id @unique @map("iata_code")
  name      String
  latitude  Decimal
  longitude Decimal
  type      RegionType

  Terminals       Terminal[]
  departureRoutes Route[]    @relation("DepartureRoutes")
  arrivalRoutes   Route[]    @relation("ArrivalRoutes")
  City            City       @relation(fields: [cityId], references: [code], onDelete: Cascade)
  cityId          String

  @@map("airports")
}

model Terminal {
  id        Int        @id @default(autoincrement())
  name      String
  type      RegionType
  airportId String     @map("airport_id")

  Airport          Airport  @relation(fields: [airportId], references: [iataCode], onDelete: Cascade)
  FlightsDeparture Flight[] @relation("DepartureTerminal")
  FlightsArrival   Flight[] @relation("ArrivalTerminal")

  @@map("terminals")
}

model Airline {
  iataCode String  @id @unique @map("iata_code")
  name     String  @unique
  imageUrl String?
  imageId  String?

  Airplanes Airplane[]

  @@map("airlines")
}

model Airplane {
  id         Int        @id @default(autoincrement())
  airlineId  String     @map("airline_id")
  name       String
  type       RegionType
  pricePerKm Decimal    @map("price_per_km")

  Airline Airline  @relation(fields: [airlineId], references: [iataCode], onDelete: Cascade)
  Flights Flight[]

  @@map("airplanes")
}

model Seat {
  id         Int     @id @default(autoincrement())
  flightId   Int     @map("flight_id")
  seatNumber Int     @map("seat_number")
  isOccupied Boolean @default(false) @map("is_occupied")

  Flight    Flight      @relation(fields: [flightId], references: [id], onDelete: Cascade)
  Passenger Passenger[]

  @@map("seats")
}

model Route {
  id                 Int     @id @default(autoincrement())
  departureAirportId String  @map("departure_airport_id")
  arrivalAirportId   String  @map("arrival_airport_id")
  distance           Decimal

  DepartureAirport Airport  @relation("DepartureRoutes", fields: [departureAirportId], references: [iataCode], onDelete: Cascade)
  ArrivalAirport   Airport  @relation("ArrivalRoutes", fields: [arrivalAirportId], references: [iataCode], onDelete: Cascade)
  Flights          Flight[]
  Ticket           Ticket[]

  @@unique([departureAirportId, arrivalAirportId])
  @@map("routes")
}

model Ticket {
  id            Int       @id @default(autoincrement())
  routeId       Int       @map("route_id")
  isTransits    Boolean   @default(false)
  class         ClassType
  isActive      Boolean   @default(true) @map("is_active")
  departureTime DateTime  @map("departure_date")
  arrivalTime   DateTime  @map("arrival_date")
  totalPrice    Decimal   @map("total_price")
  totalDuration Int       @map("total_duration")
  discountId    Int?      @map("discount_id")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  Route    Route     @relation(fields: [routeId], references: [id], onDelete: Cascade)
  Flights  Flight[]
  Discount Discount? @relation(fields: [discountId], references: [id])

  outbondOrder Order[] @relation("OutboundTicket")
  returnOrder  Order[] @relation("ReturnTicket")

  @@map("tickets")
}

model Flight {
  id                  Int       @id @default(autoincrement())
  routeId             Int       @map("route_id")
  class               ClassType
  isActive            Boolean   @default(true) @map("is_active")
  airplaneId          Int       @map("airplane_id")
  departureTime       DateTime  @map("departure_time")
  arrivalTime         DateTime  @map("arrival_time")
  duration            Int
  price               Decimal
  capacity            Int
  baggage             Int
  cabinBaggage        Int       @map("cabin_baggage")
  entertainment       Boolean
  createdAt           DateTime  @default(now()) @map("created_at")
  departureTerminalId Int       @map("departure_terminal_id")
  arrivalTerminalId   Int       @map("arrival_terminal_id")

  Route             Route    @relation(fields: [routeId], references: [id], onDelete: Cascade)
  Airplane          Airplane @relation(fields: [airplaneId], references: [id], onDelete: Cascade)
  DepartureTerminal Terminal @relation("DepartureTerminal", fields: [departureTerminalId], references: [id], onDelete: Cascade)
  ArrivalTerminal   Terminal @relation("ArrivalTerminal", fields: [arrivalTerminalId], references: [id], onDelete: Cascade)

  Ticket Ticket[]
  Seat   Seat[]

  @@map("flights")
}

model Order {
  id               String      @id
  userId           Int         @map("user_id")
  paymentId        Int         @unique @map("payment_id")
  qrCodeUrl        String?     @map("qr_code_url")
  pdfUrl           String?     @map("pdf_url")
  bookingDate      DateTime    @default(now()) @map("booking_date")
  orderStatus      OrderStatus @default(Unpaid) @map("order_status")
  isRoundTrip      Boolean     @default(false) @map("is_round_trip")
  outboundTicketId Int         @map("outbound_ticket_id")
  returnTicketId   Int?        @map("return_ticket_id")
  detailPrice      Json[]      @map("detail_price")
  createdAt        DateTime    @default(now()) @map("created_at")
  updatedAt        DateTime    @updatedAt @map("updated_at")

  User           User    @relation(fields: [userId], references: [id])
  Payment        Payment @relation(fields: [paymentId], references: [id])
  OutboundTicket Ticket  @relation("OutboundTicket", fields: [outboundTicketId], references: [id])
  ReturnTicket   Ticket? @relation("ReturnTicket", fields: [returnTicketId], references: [id])

  Passengers Passenger[]

  @@map("orders")
}

model Payment {
  id            Int       @id @default(autoincrement())
  method        String? // credit_card, e_wallet, etc.
  status        String    @default("pending") // Midtrans status: pending, settlement, expire, cancel
  amount        Decimal
  payload       Json? // Full webhook payload
  transactionId String?   @unique @map("transaction_id") // Unique transaction ID from Midtrans
  orderId       String    @unique @map("order_id") // Your system's unique order ID
  fraudStatus   String?   @map("fraud_status") // Midtrans fraud status: accept, challenge, deny
  validUntil    DateTime? @map("valid_until") // Expiration for pending payments
  paymentDate   DateTime? @map("payment_date") // When payment is completed (settlement/capture)
  token         String // token from snap midtrans
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  Order         Order?

  @@map("payments")
}

model Passenger {
  id               Int           @id @default(autoincrement())
  orderId          String        @map("order_id")
  seatId           Int           @map("seat_id")
  type             PassengerType
  title            TitleType
  name             String
  familyName       String?       @map("family_name")
  dateOfBirth      DateTime      @map("date_of_birth")
  nationality      String
  identifierNumber String        @map("identifier_number")
  issuedCountry    String        @map("issued_country")
  idValidUntil     DateTime      @map("id_valid_until")

  Order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  Seat  Seat  @relation(fields: [seatId], references: [id], onDelete: Cascade)

  @@map("passengers")
}

model Notification {
  id          Int         @id @default(autoincrement())
  accountId   Int         @map("account_id")
  type        MessageType @default(Promosi)
  title       String
  description String
  createdAt   DateTime    @default(now()) @map("created_at")
  isRead      Boolean     @default(false) @map("is_read")

  Account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Discount {
  id         Int      @id @default(autoincrement())
  percentage Int
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  Ticket     Ticket[]

  @@map("discounts")
}
